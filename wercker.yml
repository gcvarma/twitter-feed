#Use OpenJDK base docker image from dockerhub and open the application port on the docker container - Varma
box:
  id: openJDK
  ports:
    - $PORT
#Build our application using Maven. Just as we always have
build:
  steps:
    - install-packages:
        packages: maven
    - script:
        name: maven build
        code: mvn clean assembly:assembly
push-quay
# box: google/golang
  steps:
  # use the scratch step to build a container from scratch based on the files present
    - internal/docker-scratch-push:
      #disable-sync: true  # (for alpine) see this: # http://devcenter.wercker.com/docs/faq/alpine-faq.html
      username: $QUAY_USERNAME
        password: $QUAY_PASSWORD
  #       cmd: ./app
        cmd: sh target/bin/start
        tag: $WERCKER_GIT_BRANCH-$WERCKER_GIT_COMMIT
        ports: $PORT
        repository: quay.io/gcvarma/twitter-feed
        registry: https://quay.io/repository
        working-dir: /pipeline/source
#Push the docker image with our built and tested application to Docker Hub
# push-release:
#   steps:
#     - internal/docker-push:
#         username: $DOCKER_USERNAME
#         password: $DOCKER_PASSWORD
#         repository: $DOCKER_REPO
#         registry: $DOCKER_REGISTRY
#         tag: $WERCKER_GIT_BRANCH-$WERCKER_GIT_COMMIT
#         working-dir: /pipeline/source
#         ports: $PORT
#         env: PORT=$PORT
#         cmd: sh target/bin/start
#Deploy our container from the Docker Hub to Kubernetes
deploy-to-cluster:
    box:
        id: alpine
        cmd: /bin/sh
    steps:

    - bash-template

    - script:
        name: "Visualise Kubernetes config"
        code: cat kubernetes.yml

    - kubectl:
        name: deploy to kubernetes
        server: $KUBERNETES_MASTER
        #username: $KUBERNETES_USERNAME
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f kubernetes.yml
